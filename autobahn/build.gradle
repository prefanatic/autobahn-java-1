apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'me.tatarka.retrolambda'


def ARTIFACT_ANDROID = 'autobahn-android'
def ARTIFACT_ANDROID_STREAMSUPPORT = 'autobahn-android-streamsupport'
def ARTIFACT_JAVA = 'autobahn-java'

def groupID = 'io.crossbar.autobahn'
def gitUrl = 'https://github.com/crossbario/autobahn-java.git'
def licenseName = 'MIT'
def licenseUrl = 'https://opensource.org/licenses/MIT'
def relVersion = '17.11.17'
def siteUrl = 'https://github.com/crossbario/autobahn-java'

dependencies {
    api 'com.fasterxml.jackson.core:jackson-core:2.8.8'
    api 'net.sourceforge.streamsupport:streamsupport-cfuture:1.5.6'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.8.8'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.8.8'
    implementation 'org.msgpack:jackson-dataformat-msgpack:0.8.13'
}

// TODO: Bintray needs to be updated for both the standalone 'autobahn' (this one) and 'autobahn-android'
bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    if (project.IS_ANDROID) {
        configurations = ['archives']
    } else {
        publications = ['mavenJava']
    }
    publish = true
    pkg {
        repo = 'autobahn'
        if (project.IS_ANDROID) {
            name = project.BUILD_LEGACY ? ARTIFACT_ANDROID_STREAMSUPPORT : ARTIFACT_ANDROID
        } else {
            name = ARTIFACT_JAVA
        }
        userOrg = 'crossbario'
        licenses = [licenseName]
        vcsUrl = gitUrl
        version {
            name = relVersion
            released = new Date()
            mavenCentralSync {
                sync = true
                user = System.getenv('SONATYPE_USERNAME')
                password = System.getenv('SONATYPE_PASSWORD')
                close = '1'
            }
        }
    }
}

// Create the pom configuration:
def pomConfig = {
    // Set your license
    licenses {
        license {
            name licenseName
            url licenseUrl
        }
    }
    developers {
        developer {
            id "crossbario"
            name "Crossbar.io"
            email "support@crossbario.com"
        }
    }
    scm {
        url siteUrl
    }
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            groupId groupID
            artifactId ARTIFACT_JAVA
            version relVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'WebSocket & WAMP for Java8+')
                root.appendNode('name', 'Autobahn Java')
                root.appendNode('url', siteUrl)
                root.children().last() + pomConfig
            }
        }
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
sourceSets {
    main {
        java {
            exclude 'io/crossbar/autobahn/wamp/transports/AndroidWebSocket.java'
            exclude 'io/crossbar/autobahn/websocket'
            exclude 'io/crossbar/autobahn/utils/ABALogger.java'
        }
    }
}
jar {
    version = relVersion
}
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
/*

artifacts {
    archives sourcesJar
    archives javadocJar
}
*/
